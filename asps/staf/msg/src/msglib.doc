	SUBROUTINE MESSAGE(MSG,LINES,ID)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set by MESSAGE on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.
	               !If ID is negative, ID remains unchanged, and lookup
	               !is then always by prefix.

*   Output arguments:  none

*   Functional Description:
*	Conditionally display a message MSG, containing LINES lines of up to
*	132 characters each on the terminal and the journal, if enabled by a
*	call to MSG_JOURNAL_ON.  The message is displayed unless disabled.
*	The message is counted unless counting is disabled.

*   Error conditions:  none



	SUBROUTINE MESSAGE_OUT(MSG,LINES)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES !Number of lines in MSG.

*   Output arguments:  none

*   Functional Description:
*	Always display a message MSG, containing LINES lines of up to
*	132 characters each on the terminal and the journal, if
*	enabled by a call to MSG_JOURNAL_ON.  Displaying is unnaffected
*	by calls to the MSG_DISABLE command, and the message is not
*	"counted".  This is the "pure" I/O part of MESSAGE.

*   Error conditions:  none



	SUBROUTINE MSG_COUNT(PREFIX)

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*   Functional Description:
*	Enable counting, and continue displaying the message
*	recognized by PREFIX.  Has no effect if counting
*	has not been disabled.

*   Return conditions:  none

*   Error conditions:  none



	SUBROUTINE MSG_DISABLE(PREFIX)

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*   Functional Description:
*	Disable displaying, but continue counting the message
*	recognized by PREFIX.

*   Return conditions:  none

*   Error conditions:  none



	SUBROUTINE MSG_DISPLAY(MSG,LINES,ID)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set by MESSAGE on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.
	               !If ID is negative, ID remains unchanged, and lookup
	               !is then always by prefix.

*   Output arguments: none

*   Functional Description:
*	Conditionally display & count a message MSG, containing LINES lines
*	of up to 132 characters each, on the terminal.

*   Return conditions: none



	SUBROUTINE MSG_DISPLAY_AND_ECHO(MSG,LINES,LUN,ID)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.
	INTEGER LUN  !FORTRAN logical unit number for MSG to be echoed to.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set by MESSAGE on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.
	               !If ID is negative, ID remains unchanged, and lookup
	               !is then always by prefix.

*   Output arguments: none

*   Functional Description:
*	Conditionally display and count a message MSG, containing LINES lines
*	of up to 132 characters each, on the terminal, and echo the display on
*	FORTRAN logical unit LUN.

*   Return conditions: none



	SUBROUTINE MSG_DISPLAY_AND_ECHO_OUT(MSG,LINES,LUN)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.
	INTEGER LUN  !FORTRAN logical unit number for MSG to be echoed to.

*   Output arguments: none

*   Functional Description:
*	Display a message MSG, containing LINES lines of up to
*	132 characters each, on the terminal, and echo the display on
*	FORTRAN logical unit LUN.

*   Return conditions: none



	SUBROUTINE MSG_DISPLAY_OUT(MSG,LINES)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.

*   Output arguments: none

*   Functional Description:
*	Display a message MSG, containing LINES lines of up to
*	132 characters each, on the terminal.

*   Return conditions: none



	SUBROUTINE MSG_ENABLE(PREFIX)

	IMPLICIT NONE

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*   Functional Description:
*	Enable message-output for the STAR-standard message with
*	stored prefix PREFIX.  Has no effect if message-display
*	has not been disabled.

*   Return conditions:  none

*   Error conditions:  none



	LOGICAL FUNCTION MSG_ENABLED(PREFIX,ID)

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.
	               !If ID is negative, ID remains unchanged, and lookup
	               !is then always by prefix.

*   Output arguments: none

*   Functional Description:
*	Returns the message-enabled-status for the STAR-standard message with
*	stored prefix PREFIX, message-index ID.  If the message is not
*	defined, it is defined and enabled, with counting turned on.

*   Return conditions:
*	.TRUE. if the message is enabled (active),
*	.FALSE. if the message is disabled (inactive).

*   Error conditions:  none



	LOGICAL FUNCTION MSG_ENABLED_TRACE(PREFIX,ID)

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.
	               !If ID is negative, ID remains unchanged, and lookup
	               !is then always by prefix.

*   Output arguments: none

*   Functional Description:
*	Returns the message-enabled-status for the STAR-standard message with
*	stored prefix PREFIX, message-index ID.  If the message is not
*	defined, it is defined, but not enabled nor does it count, until
*	explicitly requested.
*	Identical to MSG_ENABLED, except that if a message is defined here,
*	it is defined to be inactive and non-counting, regardless of whether
*	"enable *" (enable all) has been set.  "Trace" messages must be
*	specifically enabled.
*	This is intended to be used with trace messages, which normally
*	reside in code, but are intended to be inactive until explicitly
*	activated to trace the flow of the code, as in debugging.

*   Return conditions:
*	.TRUE. if the message is enabled (active),
*	.FALSE. if the message is disabled (inactive).

*   Error conditions:  none



	SUBROUTINE MSG_GET_LUN(TERMINAL_LUN,JOURNAL_LUN)

*   Output arguments:
	INTEGER TERMINAL_LUN !FORTRAN logical unit number of terminal
	                     !for output, typically 6.
	INTEGER JOURNAL_LUN  !FORTRAN logical unit number of journal file.

*   Functional Description:
*	Get the message handler LUNs and pass them to the caller.

*   Error conditions: none



	SUBROUTINE MSG_INI(JOURNAL_LUN)

*  Input argument:
	INTEGER JOURNAL_LUN !FORTRAN logical unit number of journal file.

*  Functional description:
*	Initialize the STAR-standard message-handling package.
	
*   Error conditions:  none



	LOGICAL FUNCTION MSG_JOURNAL_CLOSE()

*   Returned value:   STAR standard return condition, see below.

*   Functional Description:
*	Call this subroutine to close the message journal file.
*	Disables message-logging in the journal file.
*	Returns .TRUE. if the file was successfully closed,
*	returns .FALSE. if the file could not be closed (probably
*	because it was not opened)

*   Return conditions:
*	.TRUE. for successful close of journal file.
*	.FALSE. for close failure of journal file.



	SUBROUTINE MSG_JOURNAL_OFF

*   Input arguments:  none
*   Output arguments: none

*   Functional Description:
*	Call this subroutine to disable the message journal file.

*   Error conditions: none



	SUBROUTINE MSG_JOURNAL_ON

*   Input arguments:  none
*   Output arguments: none

*   Functional Description:
*	Call this subroutine to enable the message journal file.

*   Error conditions: none



	LOGICAL FUNCTION MSG_JOURNAL_OPEN(FILE_NAME)

*   Input argument:
	CHARACTER*(*) FILE_NAME !The journal file-name.

*   Returned value:   STAR standard return condition, see below.

*   Functional Description:
*	Call this subroutine to specify FILE_NAME as the
*	message journal file and to open that file.
*	Returns .TRUE. if the file was successfully opened
*	and enables message logging to the journal file;
*	returns .FALSE. if the file could not be opened, and
*	disables message-logging in the journal file.

*   Return conditions:
*	.TRUE. for successful open of journal file.
*	.FALSE. for open failure of journal file.



	SUBROUTINE MSG_JOURNAL_PAGE

*   Functional Description:
*	Write a form-feed to the journal file, if open & enabled.

*   Return conditions: none



	SUBROUTINE MSG_LUN_PAGE(LUN)

	INTEGER LUN  !FORTRAN logical unit number.
	
*   Functional Description:
*	Write a form-feed to the device openned on LUN.

*   Return conditions: none



	SUBROUTINE MSG_NAME_NODE(Node_name)

*  Input argument:
	CHARACTER*(*) Node_name

*  Functional description:
*	Enters the ASCII node-name in the msg package, for use
*	in node-stamping (along with the time-stamp) journal
*	entries of message-occurrances.



	SUBROUTINE MSG_NOCOUNT(PREFIX)

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*   Functional Description:
*	Disable counting, but continue displaying the message
*	recognized by PREFIX (unless display is also disabled).

*   Return conditions:  none

*   Error conditions:  none



	INTEGER FUNCTION MSG_RC_JOURNAL_CLOSE()

*   Returned value:   STAR standard return condition, see below.

*   Functional Description:
*	Call this subroutine to close the message journal file.
*	Disables message-logging in the journal file.
*	This is the same as MSG_JOURNAL_CLOSE, but implemented
*	as an integer function returning a "code".

*   Return conditions:
*	MSG_CLOSED_RC for successful close of journal file.
*	MSG_NOT_CLOSED_RC for close failure of journal file.




	INTEGER FUNCTION MSG_RC_JOURNAL_OPEN(FILE_NAME)

*   Input argument:
	CHARACTER*(*) FILE_NAME !The journal file-name.

*   Returned value:   STAR standard return condition, see below.

*   Functional Description:
*	Call this subroutine to specify FILE_NAME as the
*	message journal file and to open that file.
*	This is the same as MSG_JOURNAL_OPEN, but implemented
*	as an integer function returning a "code".

*   Return conditions:
*	MSG_OPENED_RC for successful open of journal file.
*	MSG_NOT_OPENED_RC for open failure of journal file.



	SUBROUTINE MSG_SET_FROM_FILE(LUN)

*  Input argument:
	INTEGER LUN !FORTRAN Logical Unit Number, on which a command (ASCII)
	            !file should be (already) open.

*  Functional description:
*	Reads lines from LUN and interprets them as MSG_SET_BY_COMMAND commands
*	until either an <EOF> or a line containing MSG_EXIT is encountered.



	SUBROUTINE MSG_SET_BY_COMMAND(COM)

*  Input argument:
	CHARACTER*(*) COM !Command-string describing features to be set.

*   Functional Description:
*	Set the MSG package parameters on individual messages, referenced
*	by prefix, according to arguments contained in a single character-
*	string command contained in COM.  Commands take these forms:

*	To disable specific messages, but to continue counting their occurances:
*	DISABLE prefix-1 prefix-2 ... prefix-n

*	To enable specific messages:
*	ENABLE prefix-1 prefix-2 ... prefix-n

*	To resume counting of message occurances, whether or not disabled:
*	COUNT prefix-1 prefix-2 ... prefix-n

*	To stop counting of message occurances, whether or not disabled:
*	NOCOUNT prefix-1 prefix-2 ... prefix-n

*	To set message-limits on specific messages:
*	LIMIT prefix-1=limit-1 prefix-2=limit-2 ... prefix-n=limit-n

*	Spacing is not critical in the command line, provided at least one
*	or more spaces, tabs or commas separate the arguments.
*	The "=" symbols in the LIMIT command are essential, but spaces around
*	it are optional and not at all critical.

*	Wildcards are permitted in the prefix specifications.

*   Return conditions: none

*   Error conditions:  none



	SUBROUTINE MSG_SET_LIMIT(PREFIX,LIMIT)

*  Input arguments:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.
	INTEGER LIMIT !Maximum no. of times to display a message.

*   Functional Description:
*	Set the count limit for the message recognized by PREFIX;
*	displays of the specified message are disabled once its
*	count has exceeded LIMIT.  Wildcards are permitted.

*   Return conditions:  none

*   Error conditions:  none



	SUBROUTINE MSG_SET_LUN(TERMINAL_LUN,JOURNAL_LUN)

*   Input arguments:
	INTEGER TERMINAL_LUN !FORTRAN logical unit number of terminal
	                     !for output, typically 6.
	INTEGER JOURNAL_LUN  !FORTRAN logical unit number of journal file.

*   Output arguments:  none

*   Functional Description:
*	Set the message handler LUNs.  The caller specifies
*	the FORTRAN logical unit number of the terminal in
*	TERMINAL_LUN and the journal file in JOURNAL_LUN.

*   Error conditions: none



	SUBROUTINE MSG_SUMMARY(LUN)

*  Input argument:
	INTEGER LUN !Device on which the summary is output.

*   Functional Description:
*	Output a summary of the STAR-standard errors on the specified LUN.

*   Return conditions:  none

*   Error conditions:  none



	SUBROUTINE MSG_SUMMARY_EVENT(LUN,EVENTS)

*  Input argument:
	INTEGER LUN !Device on which the summary is output.
	INTEGER EVENTS !Number of events by which to normalize.

*   Functional Description:
*	Output a summary of the STAR-standard errors on the specified LUN.
*	Include a column of normalized occurances of each message,
*	which consists of a column of the number of occurances of each
*	message, divided by EVENTS.  If EVENTS is not positive, then the
*	column is ommitted.

*   Return conditions:  none

*   Error conditions:  none



	SUBROUTINE MSG_TIME_STAMP(LUN)

	INTEGER LUN

*   Input arguments:
*	LUN -- FORTRAN logical unit number for time-stamp to be written on.

*   Output arguments: none

*   Functional Description:
*	"Stamp" the date and time on a line on FORTRAN logical unit LUN.
*	"Stamp" the node-name on the same line, if node-name has been specified
*	with a "call msg_name_node(<node_name>)".
*	Also stamps an elapsed real-time counter and an elapsed CPU-time counter,
*	as 17-character ASCII strings.

*	Produces output only if different than the previous output from
*	this subroutine.  eg, a call to this routine in a tight loop will
*	only produce an actual time-stamp once each second.

*   Return conditions: none



	SUBROUTINE MSG_TIME_STAMP_OUT(LUN)

	INTEGER LUN

*   Input arguments:
*	LUN -- FORTRAN logical unit number for time-stamp to be written on.

*   Output arguments: none

*   Functional Description:
*	"Stamp" the date and time on a line on FORTRAN logical unit LUN.
*	"Stamp" the node-name on the same line, if node-name has been specified
*	with a "call msg_name_node(<node_name>)".
*	Also stamps an elapsed real-time counter and an elapsed CPU-time counter,
*	as 17-character ASCII strings.

*	Always produces output.

*   Return conditions: none



	SUBROUTINE MSG_TO_JOURNAL(MSG,LINES,ID)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set by MESSAGE on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.
	               !If ID is negative, ID remains unchanged, and lookup
	               !is then always by prefix.

*   Output arguments: none

*   Functional Description:
*	Conditionally display & count a message MSG, containing LINES lines
*	of up to 132 characters each, on the journal file, if open & enabled.

*   Return conditions: none



	SUBROUTINE MSG_TO_JOURNAL_OUT(MSG,LINES)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set by MESSAGE on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.

*   Output arguments: none

*   Functional Description:
*	Unconditionally display a message MSG, containing LINES lines
*	of up to 132 characters each, on the journal file, if open & enabled.

*   Return conditions: none



	SUBROUTINE MSG_TO_LUN(MSG,LINES,LUN,ID)

*   Input arguments:
	CHARACTER*(*) MSG(*) !1 or more line character-string message
	                     !submitted for display.
	INTEGER LINES  !Number of lines in MSG.
	INTEGER LUN  !FORTRAN logical unit number for MSG to be sent to.

*   Input/Output argument:
	INTEGER ID     !STAR-standard message ID.  Set to zero by caller 
                       !before first call, set by MESSAGE on first call by
                       !looking up or entering the prefix contained in MSG
                       !(prefix is everything before the first space) in
	               !the index of STAR-standard message prefixes.
	               !If ID is negative, ID remains unchanged, and lookup
	               !is then always by prefix.

*   Output arguments: none

*   Functional Description:
*	Conditionally display & count a message MSG, containing LINES lines
*	of up to 132 characters each, on LUN.

*   Return conditions: none



	SUBROUTINE MSG_TO_LUN_OUT(MSG,LINES,LUN)

	CHARACTER*(*) MSG(*)
	INTEGER LINES,LUN

*   Input arguments:
*	MSG -- 1 or more line character-string message submitted for display.
*	LINES -- Number of lines in MSG.
*	LUN -- FORTRAN logical unit number for MSG to be written to.

*   Output arguments: none

*   Functional Description:
*	Display a message MSG, containing LINES lines of up to
*	132 characters each, on FORTRAN logical unit LUN.

*   Return conditions: none
