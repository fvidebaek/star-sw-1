	SUBROUTINE MSG_CHECK(MSG,ID,ACTIVE,COUNTING)

*  Input argument:
	CHARACTER*(*) MSG !A STAR-standard message, with prefix.
	                  !MSG can be just a prefix.

*  Input/output argument:
	INTEGER ID !STAR-standard message ID.  Set to zero by caller 
                   !before first call, set by MESSAGE on first call by
                   !looking up or entering the prefix contained in MSG
                   !(prefix is everything before the first space) in
	           !the index of STAR-standard message prefixes.

*  Output arguments:
	LOGICAL ACTIVE !Flag set to .TRUE. if the message selected
                       !(by prefix and/or ID) is active.
	LOGICAL COUNTING !Flag set to .TRUE. if the message selected
                         !(by prefix and/or ID) is enabled for counting.

*   Functional Description:
*	Find the character string consisting of MSG's prefix in the
*	index of STAR-standard message prefixes (sic).  If found
*	in the index, return the index ID and the flags ACTIVE
*	and COUNTING.  If ID is specified as positive,
*	a lookup in the index is not preformed, but a
*	check that ID is in the index and a check that
*	MSG's prefix agrees with the stored STAR-standard message
*	prefix selected by ID are made.  If the stored prefix
*	does not agree with MSG's prefix, MSG_CHECK issues an error
*	message (which indicates a program bug!), then zeros ID and starts
*	again, with ID set to the correct index ID if MSG's prefix is in the
*	index, and entering MSG's prefix if it is not in the index.
*	If not found, the prefix is entered in the index.
*	The flags ACTIVE and COUNTING are set according to the whether the
*	message is active (output enabled) and enabled for counting.

*   Return conditions:  none

*   Error conditions:  none



	SUBROUTINE MSG_ENTER(PREFIX,ID)

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*  Output argument:
	INTEGER ID !STAR-standard message ID of the newly-entered
	           !message-prefix PREFIX, or zero if no more room.

*   Functional Description:

*	Enter the STAR-standard message prefix into the index.
*	If there is no more room in the index, display a message
*	and return ID=0.

*   Error conditions:  none



	LOGICAL FUNCTION MSG_FIND(PREFIX,ID,ACTIVE,COUNTING)

*  Input argument:
	CHARACTER*(*) PREFIX !A STAR-standard message prefix.

*  Output arguments:
	INTEGER ID       !STAR-standard message ID.
	LOGICAL ACTIVE   !Flag set to .TRUE. if the message selected
                         !(by PREFIX and/or ID) is active.
	LOGICAL COUNTING !Flag set to .TRUE. if the message selected
                         !(by PREFIX and/or ID) is enabled for counting.

*   Functional Description:

*	Find the character string PREFIX in the index of
*	STAR-standard message prefixes (sic).  If found
*	in the index, return the index ID and return
*	MSG_FIND true.  The ID is never used to find PREFIX.
*	If PREFIX is not found, returns .FALSE..  The flags ACTIVE
*	and COUNTING are set according to the whether the message
*	is active (output enabled) and enabled for counting.

*   Return conditions:
*	.TRUE. if PREFIX is found in the index.
*	.FALSE. if PREFIX is not found in the index.

*   Error conditions:  none



	SUBROUTINE MSG_GET_PREFIX(MSG,PREFIX)

*  Input argument:
	CHARACTER*(*) MSG !A STAR-standard message, with prefix.

*  Output argument:
	CHARACTER*(*) PREFIX !The STAR-standard message-prefix from MSG.

*   Functional Description:
*	Extract the STAR-standard prefix from the character string MSG
*	and return it in PREFIX.

*   Return conditions:  none

*   Error conditions:  none



	SUBROUTINE MSG_INCR(ID)

*  Input argument:
	INTEGER ID !STAR-standard message-ID -- must be valid.

*  Functional description:
*	Increment the counter for the STAR-standard-message indexed
*	by ID.



	SUBROUTINE MSG_PARSE_PREFIX
     1	          (Prefix,Prefix_stripped,Prefix_number)

*  Input argument:
	CHARACTER*(*) Prefix !STAR-standard messsage prefix.

*  Output arguments:
	CHARACTER*(*) Prefix_stripped !Prefix stripped of trailing digits.
	INTEGER Prefix_number !Prefix trailing digits, decoded as integer.
	                      !If there are no trailing digits, set to zero.

*  Functional description:
*	Parse the specified STAR-standard message prefix "Prefix" into two
*	components:
*	1)	The prefix without trailing digits,
*	2)	The trailing digits, converted to an integer.
*	The principal use of this is for sorting, to preserve the sequence
*	1,2,3...8,9,10,11, etc., instead of the straight ASCII sequence,
*	which would go as 1,10,11,...,2,20,21,... etc.



